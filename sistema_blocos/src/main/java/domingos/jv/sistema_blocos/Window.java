package domingos.jv.sistema_blocos;

import javax.swing.JOptionPane;
import javax.swing.JTextField;

public class Window extends javax.swing.JFrame {

    /**
     * Creates new form Window
     */
    public Window() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        radioGroupCorda = new javax.swing.ButtonGroup();
        titulo = new javax.swing.JLabel();
        img = new javax.swing.JLabel();
        btnCalcular = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        txtA = new javax.swing.JLabel();
        inputA = new javax.swing.JTextField();
        txtB = new javax.swing.JLabel();
        inputB = new javax.swing.JTextField();
        txtC = new javax.swing.JLabel();
        inputC = new javax.swing.JTextField();
        txtCorda = new javax.swing.JLabel();
        inputCorda = new javax.swing.JTextField();
        txtCorda1 = new javax.swing.JLabel();
        radioNone = new javax.swing.JRadioButton();
        radioEsquerda = new javax.swing.JRadioButton();
        radioDireita = new javax.swing.JRadioButton();
        line = new javax.swing.JSeparator();
        tituloRes = new javax.swing.JLabel();
        tituloDiagrama = new javax.swing.JLabel();
        containerDiagrama = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtRes = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sistema de Blocos");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("window"); // NOI18N
        setResizable(false);

        titulo.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        titulo.setText("Sistema de Blocos");

        img.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/imagem_exercicio.jpg"))); // NOI18N

        btnCalcular.setBackground(new java.awt.Color(255, 255, 255));
        btnCalcular.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        btnCalcular.setForeground(new java.awt.Color(0, 0, 0));
        btnCalcular.setText("Calcular");
        btnCalcular.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularActionPerformed(evt);
            }
        });

        btnReset.setBackground(new java.awt.Color(255, 255, 255));
        btnReset.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        btnReset.setForeground(new java.awt.Color(0, 0, 0));
        btnReset.setText("Resetar");
        btnReset.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnReset.setMaximumSize(new java.awt.Dimension(105, 29));
        btnReset.setMinimumSize(new java.awt.Dimension(105, 29));

        txtA.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtA.setText("Massa do Bloco A (Kg)");

        inputA.setBackground(new java.awt.Color(255, 255, 255));
        inputA.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        inputA.setForeground(new java.awt.Color(0, 0, 0));
        inputA.setToolTipText("Kg");
        inputA.setName("inputA"); // NOI18N
        inputA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputAActionPerformed(evt);
            }
        });

        txtB.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtB.setText("Massa do Bloco B (Kg)");

        inputB.setBackground(new java.awt.Color(255, 255, 255));
        inputB.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        inputB.setForeground(new java.awt.Color(0, 0, 0));
        inputB.setToolTipText("Kg");
        inputB.setName("inputB"); // NOI18N
        inputB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputBActionPerformed(evt);
            }
        });

        txtC.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtC.setText("Massa do Bloco C (Kg)");

        inputC.setBackground(new java.awt.Color(255, 255, 255));
        inputC.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        inputC.setForeground(new java.awt.Color(0, 0, 0));
        inputC.setToolTipText("Kg");
        inputC.setName("inputC"); // NOI18N
        inputC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputCActionPerformed(evt);
            }
        });

        txtCorda.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtCorda.setText("Tensão Máxima da Corda (N)");

        inputCorda.setBackground(new java.awt.Color(255, 255, 255));
        inputCorda.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        inputCorda.setForeground(new java.awt.Color(0, 0, 0));
        inputCorda.setText("100");
        inputCorda.setToolTipText("Kg");
        inputCorda.setName("inputCorda"); // NOI18N
        inputCorda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputCordaActionPerformed(evt);
            }
        });

        txtCorda1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtCorda1.setText("Cortar Corda:");

        radioGroupCorda.add(radioNone);
        radioNone.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        radioNone.setSelected(true);
        radioNone.setText("Não");

        radioGroupCorda.add(radioEsquerda);
        radioEsquerda.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        radioEsquerda.setText("Esquerda");
        radioEsquerda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioEsquerdaActionPerformed(evt);
            }
        });

        radioGroupCorda.add(radioDireita);
        radioDireita.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        radioDireita.setText("Direita");

        tituloRes.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        tituloRes.setText("Resultado");

        tituloDiagrama.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        tituloDiagrama.setForeground(new java.awt.Color(0, 0, 0));
        tituloDiagrama.setText("Diagrama de Corpos Livres");

        containerDiagrama.setBackground(new java.awt.Color(255, 255, 255));
        containerDiagrama.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204)));

        javax.swing.GroupLayout containerDiagramaLayout = new javax.swing.GroupLayout(containerDiagrama);
        containerDiagrama.setLayout(containerDiagramaLayout);
        containerDiagramaLayout.setHorizontalGroup(
            containerDiagramaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 417, Short.MAX_VALUE)
        );
        containerDiagramaLayout.setVerticalGroup(
            containerDiagramaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 181, Short.MAX_VALUE)
        );

        txtRes.setEditable(false);
        txtRes.setBackground(new java.awt.Color(255, 255, 255));
        txtRes.setColumns(20);
        txtRes.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        txtRes.setForeground(new java.awt.Color(0, 0, 0));
        txtRes.setLineWrap(true);
        txtRes.setRows(5);
        txtRes.setText("O resultado virá aqui");
        txtRes.setFocusable(false);
        jScrollPane1.setViewportView(txtRes);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(237, 237, 237)
                .addComponent(titulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(238, 238, 238))
            .addComponent(line)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(18, 18, 18)
                        .addComponent(containerDiagrama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(tituloRes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(tituloDiagrama)
                        .addGap(104, 104, 104))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(txtCorda)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(inputCorda))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(txtC)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(inputC))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(txtB)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(inputB))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(txtA)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(inputA, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtCorda1)
                                .addGap(18, 18, 18)
                                .addComponent(radioNone, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(radioEsquerda)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(radioDireita)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnCalcular, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(42, 42, 42)
                                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(img)
                                .addGap(14, 14, 14)))
                        .addGap(87, 87, 87))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(titulo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtA)
                            .addComponent(inputA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtB)
                            .addComponent(inputB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtC)
                            .addComponent(inputC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(img)
                        .addGap(12, 12, 12)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCorda)
                    .addComponent(inputCorda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCorda1)
                            .addComponent(radioNone)
                            .addComponent(radioEsquerda)
                            .addComponent(radioDireita)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCalcular, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(46, 46, 46)
                .addComponent(line, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tituloRes)
                    .addComponent(tituloDiagrama))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(containerDiagrama, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addGap(13, 13, 13))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void inputAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputAActionPerformed

    private void inputBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputBActionPerformed

    private void inputCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputCActionPerformed

    private void inputCordaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputCordaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputCordaActionPerformed

    private void radioEsquerdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioEsquerdaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioEsquerdaActionPerformed

    private void btnCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularActionPerformed
        
        JTextField[] inputs = {inputA, inputB, inputC, inputCorda};
        
        // Realiza os verificamentos
        if(!isPreenchido(inputs))
            return;
        
        if(!isValido(inputs))
            return;
        
        // Transforma os dados em double
        double massaA = Double.parseDouble(inputA.getText());
        double massaB = Double.parseDouble(inputB.getText());
        double massaC = Double.parseDouble(inputC.getText());
        double tracaoMax = Double.parseDouble(inputCorda.getText());
        boolean cordaArrebentou;
        
        Double[] respostas = new Double[3];
        
        // Checa qual tipo de calculo ira ser feito
        if(radioNone.isSelected()) {
            // Faz o calculo para 3 blocos
            //System.out.println("Corda nao cortada");
            respostas = calcular(massaA, massaB, massaC);
            
        } else if(radioEsquerda.isSelected()) {
            // Realiza o calculo para quando a corda da esquerda esta cortada
            //System.out.println("Corda da Esquerda Cortada");
            respostas = calcular(massaC, massaB, radioEsquerda.getText());
            
        } else if(radioDireita.isSelected()) {
            // Realiza o calculo para quando a corda da direita esta cortada
            //System.out.println("Corda da Direita Cortada");
            respostas = calcular(massaA, massaB, radioDireita.getText());
        }
        /*
        for(int i = 0; i < 3; i++) {
            System.out.println("Resposta " + (i+1) + ": " + respostas[i]);
        } */
        
        // Verifica se a corda arrebenta ou não
        cordaArrebentou = isArrebentar(tracaoMax, tracaoEsq, tracaoDir);
        
        
        
        
        
    }//GEN-LAST:event_btnCalcularActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Window().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCalcular;
    private javax.swing.JButton btnReset;
    private javax.swing.JPanel containerDiagrama;
    private javax.swing.JLabel img;
    private javax.swing.JTextField inputA;
    private javax.swing.JTextField inputB;
    private javax.swing.JTextField inputC;
    private javax.swing.JTextField inputCorda;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator line;
    private javax.swing.JRadioButton radioDireita;
    private javax.swing.JRadioButton radioEsquerda;
    private javax.swing.ButtonGroup radioGroupCorda;
    private javax.swing.JRadioButton radioNone;
    private javax.swing.JLabel titulo;
    private javax.swing.JLabel tituloDiagrama;
    private javax.swing.JLabel tituloRes;
    private javax.swing.JLabel txtA;
    private javax.swing.JLabel txtB;
    private javax.swing.JLabel txtC;
    private javax.swing.JLabel txtCorda;
    private javax.swing.JLabel txtCorda1;
    private javax.swing.JTextArea txtRes;
    // End of variables declaration//GEN-END:variables

    // Declaracao das variaveis para o calculo
    private static final double gravidade = 9.8;
    private static double aceleracao;
    private static double tracaoEsq;
    private static double tracaoDir;
    
    // Verifica se os inputs estão preenchidos
    private static boolean isPreenchido(JTextField[] inputs) {
        String txtInput;
        String msg = "Preencha todos os campos!!!";
        String titulo = "Erro de preenchimento!";
        
        for (JTextField input : inputs) {
            txtInput = input.getText();
            //System.out.println("Input " + input.getName() + ": " + txtInput);
            
            if(txtInput.isEmpty()) {
                //System.out.println("Preencha todos os campos!!!");
                
                JOptionPane.showMessageDialog(null, msg, titulo, JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        
        return true;
    }

    // Verifica se os dados digitados são válidos
    private static boolean isValido(JTextField[] inputs) {
        
        String titulo = "Dados inválidos!";
        String msg = "Por favor, digite apenas numeros positivos!";
        double dado;
        
        for (JTextField input : inputs) {
            try{
                dado = Double.parseDouble(input.getText());
                
                //System.out.println("Dado " + input.getName() + ": " + dado);
                
                if(dado <= 0) {
                    //System.out.println("Numero negativo");
                    JOptionPane.showMessageDialog(null, msg, titulo, JOptionPane.ERROR_MESSAGE);
                    return false;
                }
                
                if(input.getName() == "inputCorda" && dado < 10) {
                    //System.out.println("Numero invalido da corda");
                    String msgCorda = "O valor minimo da tensão máxima da corda é 10N";
                    String tituloCorda = "Valor inválido da Corda";
                    JOptionPane.showMessageDialog(null, msgCorda, tituloCorda, JOptionPane.ERROR_MESSAGE);
                    return false;
                }
                
            } catch(NumberFormatException ex) {
                //System.out.println("Nao eh numero!");
                JOptionPane.showMessageDialog(null, msg, titulo, JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        
        return true;
    }
    
    // Realiza os calculos para quando tem 3 blocos
    private static Double[] calcular(double massaA, double massaB, double massaC) {
        
        Double[] respostas = new Double[3];
        
        aceleracao = ((massaC - massaA) * gravidade) / (massaA + massaB + massaC);
        respostas[0] = aceleracao;
        
        tracaoEsq = (massaA * aceleracao) + (massaA * gravidade);
        respostas[1] = tracaoEsq;
        
        tracaoDir = (massaC * -aceleracao) + (massaC * gravidade);
        respostas[2] = tracaoDir;
        
        return respostas;
    }
    
    // Realiza os calculos quando corta a corda de esquerda
    private static Double[] calcular(double massaPendurado, double outraMassa, String cordaCortada) {
        
        Double[] respostas = new Double[3];
        System.out.println("Funcao: " + cordaCortada);
        
        if(cordaCortada == "Esquerda") {
            System.out.println("Entrou esqeurda");
            aceleracao = (massaPendurado * gravidade) / (outraMassa + massaPendurado);
            respostas[0] = aceleracao;

            respostas[1] = 0.0;

            tracaoDir = outraMassa * aceleracao;
            respostas[2] = tracaoDir;

            return respostas;
            
        } else{
            System.out.println("Entrou direita");
            aceleracao = (massaPendurado * gravidade) / (outraMassa + massaPendurado);
            respostas[0] = -aceleracao;
            
            tracaoEsq = -outraMassa * aceleracao;
            respostas[1] = tracaoEsq;
            
            respostas[2] = 0.0;
            
            return respostas;
        }
        
    }

    // Checa se a corda irá arrebentar
    private static boolean isArrebentar(double tensaoMax, double tracaoEsq, double tracaoDir) {
        
        if(tracaoEsq > tensaoMax || tracaoDir > tensaoMax) {
            return true;
        }
        
        return false;
    }
    
}
